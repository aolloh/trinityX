stages:
  - test

variables:
  INSIDE_RUNNER: "true"

rollout:
  stage: test
  when: manual
  
  parallel:
    matrix:
    - TAG: "rocky8"
    - TAG: "rocky9"
    - TAG: "centos8"
    - TAG: "centos9"
    - TAG: "rhel8"
    - TAG: "rhel9"
    - TAG: "alma8"
    - TAG: "alma9"
    
  tags:
  - $TAG
  - "vm"
  
  script:
  - echo Setup Network on Primary
  - hostnamectl set-hostname controller1 
  - systemctl restart NetworkManager
  - /tmp/fix-firewalld-zones.sh || true
  - nmcli con add connection.interface-name ens224 type ethernet
  - nmcli con mod ethernet-ens224 ipv4.addresses 10.141.255.254/16  ipv4.method manual  ipv4.dns 127.0.0.1 ipv4.dns-search cluster
  - nmcli con up id ethernet-ens224

  - echo Setup site/hosts and site/group_vars/all.yml 
  - "cp site/hosts.example site/hosts"
  - "cp site/group_vars/all.yml.example site/group_vars/all.yml"
  - "sed -i -E \"s/ens6/ens224/\" site/group_vars/all.yml"
  - "if [ \"$CI_COMMIT_REF_NAME\" != \"master\" ] && [ \"$CI_COMMIT_REF_NAME\" != \"main\" ]; then sed -i -E \"s/trix_stream: '[a-z]+'/trix_stream: 'testing'/\" site/group_vars/all.yml; fi"
  - cat "site/group_vars/all.yml"

  - echo Run prepare
  - ./prepare.sh

  - find /etc/yum.repos.d/ -type f | xargs sed -i 's|baseurl=http://dl.rockylinux.org/$contentdir/|baseurl=https://updates.clustervision.com/mirror/rocky-linux/|g'

  - echo Run controller
  - "( cd site && ansible-playbook controller.yml )"

  - echo Run compute
  - "( cd site && ansible-playbook compute-redhat.yml )"
  - "( cd site && ansible-playbook compute-ubuntu.yml )"

  - systemctl restart NetworkManager
  - /tmp/fix-firewalld-zones.sh || true
  - sed -i -E "s/RealMemory=100/RealMemory=4000/" /etc/slurm/slurm-nodes.conf
  - systemctl restart slurmctld
  - luna node change node001 --interface BOOTIF --macaddress $TST_NODE001_MAC
  - 'for i in {180..0}; do if [ -z "$(sinfo --Node | grep -e "node001 .* defq\*\? idle")" ]; then echo "Waiting for SLURM node to become available. Countdown: $(( $i * 5))" && sleep 5; else break; fi; done'

  - obol user add test -p test -g admins
  - sudo -H -u test bash -c 'printf "#!/bin/bash\\necho Hello World\\n" > ~/test-job.sh'
  - script_path="$(sudo -H -u test bash -c 'echo ~/test-job.sh')" && sudo -H -u test chmod +x $script_path
  - sudo -H -u test bash -c 'cd && srun ./test-job.sh'


ha-rollout:
  stage: test
  when: manual
  
  parallel:
    matrix:
    - TAG: "rocky8"
    - TAG: "rocky9"
    - TAG: "centos8"
    - TAG: "centos9"
    - TAG: "rhel8"
    - TAG: "rhel9"
    # - TAG: "alma8"
    # - TAG: "alma9"
    
  tags:
  - $TAG
  - "vm"
  - "ha"
  
  script:
  - ssh-keygen -F $TST_CTRL002_IP || ssh-keyscan $TST_CTRL002_IP >> ~/.ssh/known_hosts
  
  - echo Setup Network on Primary
  - hostnamectl set-hostname controller1 
  - systemctl restart NetworkManager
  - /tmp/fix-firewalld-zones.sh || true
  - nmcli con add connection.interface-name ens224 type ethernet
  - nmcli con add connection.interface-name ens256 type ethernet
  - nmcli con mod ethernet-ens224 ipv4.addresses 10.141.255.254/16 ipv4.method manual  ipv4.dns 127.0.0.1 ipv4.dns-search cluster
  - nmcli con mod ethernet-ens256 ipv4.addresses 10.146.255.254/16 ipv4.method manual  ipv4.dns 127.0.0.1 ipv4.dns-search cluster
  - nmcli con up id ethernet-ens224
  - nmcli con up id ethernet-ens256

  - echo Setup Network on Secondary
  - ssh $TST_CTRL002_IP hostnamectl set-hostname controller2
  - ssh $TST_CTRL002_IP nmcli con add connection.interface-name ens224 type ethernet
  - ssh $TST_CTRL002_IP nmcli con add connection.interface-name ens256 type ethernet
  - ssh $TST_CTRL002_IP nmcli con mod ethernet-ens224 ipv4.addresses 10.141.255.253/16
  - ssh $TST_CTRL002_IP nmcli con mod ethernet-ens256 ipv4.addresses 10.146.255.253/16
  - ssh $TST_CTRL002_IP nmcli con mod ethernet-ens224 ipv4.method manual
  - ssh $TST_CTRL002_IP nmcli con mod ethernet-ens256 ipv4.method manual
  - ssh $TST_CTRL002_IP nmcli con up id ethernet-ens224
  - ssh $TST_CTRL002_IP nmcli con up id ethernet-ens256

  - echo Setup site/hosts and site/group_vars/all.yml on Primary
  - "cp site/hosts.example site/hosts"
  - "cp site/group_vars/all.yml.example site/group_vars/all.yml"
  - "sed -i -E \"s/ens6/ens224/\" site/group_vars/all.yml"
  - "sed -i -E \"s/disk: '\\/dev\\/vda'/disk: '\\/dev\\/sdb'/\" site/group_vars/all.yml"
  - "sed -i -E \"s/ha: false/ha: true/\" site/group_vars/all.yml"
  - "sed -i -E \"s/enable_ipmilan_fencing: true/enable_ipmilan_fencing: false/\" site/group_vars/all.yml"
  - "if [ \"$CI_COMMIT_REF_NAME\" != \"master\" ] && [ \"$CI_COMMIT_REF_NAME\" != \"main\" ]; then sed -i -E \"s/trix_stream: '[a-z]+'/trix_stream: 'testing'/\" site/group_vars/all.yml; fi"
  - cat "site/group_vars/all.yml"

  - echo Setup site/hosts and site/group_vars/all.yml on Secondary
  - "scp -r $PWD/* $TST_CTRL002_IP:"

  - find /etc/yum.repos.d/ -type f | xargs sed -i 's|baseurl=http://dl.rockylinux.org/$contentdir/|baseurl=https://updates.clustervision.com/mirror/rocky-linux/|g'
  - ssh $TST_CTRL002_IP find /etc/yum.repos.d/ -type f | xargs sed -i 's|baseurl=http://dl.rockylinux.org/$contentdir/|baseurl=https://updates.clustervision.com/mirror/rocky-linux/|g'


  - echo Run prepare on Primary
  - ./prepare.sh
  - echo Run prepare on Secondary
  - ssh $TST_CTRL002_IP INSIDE_RUNNER=true ./prepare.sh

  - echo Run controller on Primary
  - "( cd site && ansible-playbook controller.yml )"
  - echo Run controller on Secondary
  - ssh $TST_CTRL002_IP "( cd site && INSIDE_RUNNER=true ansible-playbook controller.yml )"

  - echo Run compute on Primary
  - "( cd site && ansible-playbook compute-redhat.yml compute-ubuntu.yml )"

  - systemctl restart NetworkManager
  - /tmp/fix-firewalld-zones.sh || true
  - sed -i -E "s/RealMemory=100/RealMemory=4000/" /etc/slurm/slurm-nodes.conf
  - systemctl restart slurmctld
  - luna node change node001 --interface BOOTIF --macaddress $TST_NODE001_MAC
  - 'for i in {180..0}; do if [ -z "$(sinfo --Node | grep -e "node001 .* defq\*\? idle")" ]; then echo "Waiting for SLURM node to become available. Countdown: $(( $i * 5))" && sleep 5; else break; fi; done'

  - obol user add test -p test -g admins
  - sudo -H -u test bash -c 'printf "#!/bin/bash\\necho Hello World\\n" > ~/test-job.sh'
  - script_path="$(sudo -H -u test bash -c 'echo ~/test-job.sh')" && sudo -H -u test chmod +x $script_path
  - sudo -H -u test bash -c 'cd && srun ./test-job.sh'
