---
# Main file to enable the Azure Support for the TrinityX Installation.

- name: Verifying if clones repo already exists
  stat:
    path: "{{ trix_local }}/gitrepos/trinityx-terraform"
  register: terraform_cloned_repo_dir
  
- name: Clone TerraForm repository
  git:
    repo: "{{ cloud_terraform_repository }}"
    dest: "{{ trix_local }}/gitrepos/trinityx-terraform"
  environment:
    - GIT_SSL_NO_VERIFY: "true"
  when: not terraform_cloned_repo_dir.stat.exists

- name: Update TerraForm repository
  git:
    repo: "{{ cloud_terraform_repository }}"
    dest: "{{ trix_local }}/gitrepos/trinityx-terraform"
    clone: false
    update: true
  environment:
    - GIT_SSL_NO_VERIFY: "true"
  when: terraform_cloned_repo_dir.stat.exists

- name: print azure_installer
  debug:
    msg: "azure_installer {{ azure_installer }}"

- block:
  - name: Copy Terraform tfvars into correct place
    copy:
      src: "{{ terraform_files }}/terraform.tfvars"
      dest: "{{ trix_local }}/gitrepos/trinityx-terraform/{{ cloudname }}"
 
  - name: Do Terraform runs
    shell: "cd {{ trix_local }}/gitrepos/trinityx-terraform/{{ cloudname }} && terraform {{ item }}"
    with_items:
      - init
      - validate
      - "plan -out {{ cloudname }}-tfplan"
      - "apply {{ cloudname }}-tfplan"
#      - destroy

  - name: Collect all output variables
    shell: "cd {{ trix_local }}/gitrepos/trinityx-terraform/{{ cloudname }} && terraform output"
    register: terraform_output

  - name: Storing all output variables
    copy:
      content: "{{ terraform_output.stdout }}"
      dest: "{{ trix_local }}/gitrepos/trinityx-terraform/{{ cloudname }}/variables.dat"
    when:
      - terraform_output is defined
      - terraform_output.rc | int == 0
  when:
    - cloudname
    - terraform_files
