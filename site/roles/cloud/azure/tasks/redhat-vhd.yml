---
# Creating the Azure VHD for GRUB Booting.

- block:
  - name: Get VHD path
    set_fact:
      vhd_path: "{{ trix_images }}/{{ vhd_name }}"

  - name: Install Dependency qemu-img
    dnf:
      disable_gpg_check: true
      name: "qemu-img"
      state: present
  
  - name: Create directories for VHD
    file:
      name: "{{ vhd_dir }}"
      state: directory
    with_items:
      - "{{ vhd_path }}"
      - "{{ vhd_path }}/etc"
      - "{{ vhd_path }}/etc/sysconfig"
      - "{{ vhd_path }}/etc/dnf"
    loop_control:
      loop_var: vhd_dir
  
  - name: Create Empty Config files
    file:
      path: "{{ empty_file }}"
      state: touch
    with_items:
      - "{{ vhd_path }}/etc/sysconfig/network"
      - "{{ vhd_path }}/etc/resolv.conf"
    loop_control:
      loop_var: empty_file
  
  - name: Copy local DNF Configuration and Variables
    copy:
      src: "{{ config_file.src }}"
      dest: "{{ config_file.dest }}"
    with_items:
      - { src: "/etc/dnf/dnf.conf", dest: "{{ vhd_path }}/etc/dnf/" }
      - { src: "/etc/dnf/vars", dest: "{{ vhd_path }}/etc/dnf/" }
    loop_control:
      loop_var: config_file
  
  - name: Create {{ vhd_path }}/dev
    file:
      path: "{{ vhd_path }}/dev/"
      state: directory
      mode: 0755
      owner: root
      group: root

  - name: Create basic /dev files
    command: "/usr/bin/mknod {{ vhd_path }}/dev/{{ basic_file.dev }} {{ basic_file.t }} {{ basic_file.ma }} {{ basic_file.mi }} creates={{ vhd_path }}/dev/{{ basic_file.dev }}"
    args:
      creates: "{{ vhd_path }}/dev/{{ basic_file.dev }}"
    with_items:
      - { dev: "null",    mo: "666", t: 'c', ma: 1, mi: 3 }  # device, mode, type, major, minor
      - { dev: "zero",    mo: "666", t: 'c', ma: 1, mi: 5 }
      - { dev: "random",  mo: "666", t: 'c', ma: 1, mi: 8 }
      - { dev: "urandom", mo: "666", t: 'c', ma: 1, mi: 9 }
      - { dev: "console", mo: "600", t: 'c', ma: 5, mi: 1 }
      - { dev: "ptmx",    mo: "666", t: 'c', ma: 5, mi: 2 }
      - { dev: "tty",     mo: "666", t: 'c', ma: 5, mi: 0 }
    loop_control:
      loop_var: basic_file

  # - name: Check OS release on controller
  #   command: rpm -qf /etc/os-release --queryformat '%{VERSION}'
  #   register: releasever
  #   changed_when: false

  - name: Install core packages - @core, kernel and grub2
    dnf:
      disable_gpg_check: true
      name: "{{ vhd_core_packages }}"
      state: present
      installroot: "{{ vhd_path }}"
      # releasever: "{{ releasever.stdout }}"
  
  - name: Copy Grub iPXE File
    copy:
      src: "{{ ipxe_file.src }}"
      dest: "{{ ipxe_file.dest }}"
    with_items:
      - { src: "/trinity/images/ipxe/src/bin-x86_64-efi/ipxe.efi", dest: "{{ vhd_path }}/boot/efi/EFI/rocky/ipxe.efi" }
      - { src: "/usr/share/grub/unicode.pf2", dest: "{{ vhd_path }}/boot/efi/EFI/rocky/fonts/" }
    loop_control:
      loop_var: ipxe_file
  
  - name: Mount dev, sys and Proc
    mount:
      src: "{{ mount_dir.src }}"
      path: "{{ mount_dir.path }}"
      opts: bind
      fstype: none
      state: mounted
    with_items:
      -  { src: "/dev/", path: "{{ vhd_path }}/dev/" }
      -  { src: "/sys/", path: "{{ vhd_path }}/sys/" }
      -  { src: "/proc/", path: "{{ vhd_path }}/proc/" }
    loop_control:
      loop_var: mount_dir
  
  - name: Create script to set environment variable and generate GRUB config
    copy:
      dest: "{{ vhd_path }}/tmp/grub-config.sh"
      content: |
        export GRUB_DISABLE_OS_PROBER=true
        grub2-mkconfig -o /boot/efi/EFI/rocky/grub.cfg
      mode: '0755'

  - name: Run the script inside chroot
    shell: "chroot {{ vhd_path }} /tmp/grub-config.sh"

  - name: Remove the temporary script
    file:
      path: "{{ vhd_path }}/tmp/grub-config.sh"
      state: absent

  # - name: Append Trinity block to GRUB configuration
  #   blockinfile:
  #     path: "{{ vhd_path }}/boot/efi/EFI/rocky/grub.cfg"
  #     marker: "# {mark} ANSIBLE MANAGED BLOCK"
  #     block: |
  #       menuentry "Trinity iPXE" {
  #               chainloader (hd0,gpt1)/efi/rocky/ipxe.efi rootdelay=300 console=ttyS0 earlyprintk=ttyS0 no_timer_check net.ifnames=0 biosdevname=0 crashkernel=auto boot_success=0
  #       }
        
  # - name: Install Grub Entry
  #   shell: "chroot {{ vhd_path }} grub2-mkconfig -o /boot/efi/EFI/rocky/grub.cfg"
  
  - name: Copy GRUB Menu Entry
    template:
      src: 'grub.cfg'
      dest: "{{ vhd_path }}/boot/efi/EFI/rocky/grub.cfg"
  
  - name: Update Grub
    # shell: "chroot {{ vhd_path }} grub2-set-default 'Trinity iPXE'"
    shell: "chroot {{ vhd_path }} grub2-set-default 2"

  - name: Unmount dev, sys and Proc
    mount:
      src: "{{ umount_dir.src }}"
      path: "{{ umount_dir.path }}"
      opts: bind
      fstype: none
      state: unmounted
    with_items:
      -  { src: "/dev/", path: "{{ vhd_path }}/dev/" }
      -  { src: "/sys/", path: "{{ vhd_path }}/sys/" }
      -  { src: "/proc/", path: "{{ vhd_path }}/proc/" }
    loop_control:
      loop_var: umount_dir

  - name: Create Empty Linux disk
    shell: "qemu-img create -f raw {{ trix_images }}/azure.img 5G"
  
  - name: Get the Loop Device
    shell: "losetup -Pf --show {{ trix_images }}/azure.img"
    register: loop_device
    changed_when: false

  - name: Create Partitions
    shell: "parted {{ loop_device.stdout }} -s {{ partitions }}"
    with_items:
      - 'mklabel gpt'
      - 'mkpart efi fat32 1MiB 100MiB'
      - 'mkpart boot ext4 100MiB 600MiB'
      - 'mkpart swap linux-swap 600MiB 1600MiB'
      - 'mkpart root ext4 1600MiB 100%'
      - 'set 2 boot on'
      - 'set 1 esp on'
      - 'name 1"EFI System Partition"'
      - 'name 2"Boot Partition"'
      - 'name 3"Swap"'
      - 'name 4"Root Filesystem"'
    loop_control:
      loop_var: partitions
  
  - name: Create uEFI Partition And Add Data
    shell: "{{ efi_partition }}"
    with_items:
      - 'mkfs.fat -F 16 {{ loop_device.stdout }}p1'
      - 'mkdir -p /mnt/{{ vhd_name }}/efi'
      - 'mount {{ loop_device.stdout }}p1 /mnt/{{ vhd_name }}/efi'
      - 'cp -r {{ vhd_path }}/boot/efi/. /mnt/{{ vhd_name }}/efi/'
      - 'umount /mnt/{{ vhd_name }}/efi'
    loop_control:
      loop_var: efi_partition
  
  - name: Create BOOT Partition And Add Data
    shell: "{{ boot_partition }}"
    with_items:
      - 'mkfs.ext4 {{ loop_device.stdout }}p2'
      - 'mkdir -p /mnt/{{ vhd_name }}/boot'
      - 'mount {{ loop_device.stdout }}p2 /mnt/{{ vhd_name }}/boot'
      - 'cp -r {{ vhd_path }}/boot/. /mnt/{{ vhd_name }}/boot/'
      - 'umount /mnt/{{ vhd_name }}/boot'
    loop_control:
      loop_var: boot_partition
  
  - name: Create SWAP Partition
    shell: "{{ swap_partition }}"
    with_items:
      - 'mkswap {{ loop_device.stdout }}p3'
      - 'swaplabel -L swappart {{ loop_device.stdout }}p3'
    loop_control:
      loop_var: swap_partition

  - name: Create ROOT Partition And Add Data
    shell: "{{ root_partition }}"
    with_items:
      - 'mkfs.ext4 {{ loop_device.stdout }}p4'
      - 'mkdir -p /mnt/{{ vhd_name }}/root'
      - 'mount {{ loop_device.stdout }}p4 /mnt/{{ vhd_name }}/root'
      - 'cp -r {{ vhd_path }}/. /mnt/{{ vhd_name }}/root/'
      - 'rm -rf /mnt/{{ vhd_name }}/root/boot/'
      - 'umount /mnt/{{ vhd_name }}/root'
    loop_control:
      loop_var: root_partition

  - name: Clean up the Mount and Loop Device
    shell: "{{ clean_up }}"
    with_items:
      - 'rm -rf /mnt/{{ vhd_name }}'
      - 'losetup -d {{ loop_device.stdout }}'
    loop_control:
      loop_var: clean_up

  - name: Convert LINUX Image to VHD
    shell: "qemu-img convert -f raw -o subformat=fixed,force_size -O vpc {{ trix_images }}/azure.img {{ trix_images }}/{{ vhd_name }}.vhd"
  when: vars.azure_vhd_type == 'RedHat'

- block:
  - name: Create Debian VHD
    debug:
      msg: "This Feature Will be Available In upcoming releases."
  when: vars.azure_vhd_type == 'Debian'




