# ------------------------------------------------------------------------------
# This code is part of the TrinityX software suite
# Copyright (C) 2023  ClusterVision Solutions b.v.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# File: aws/terraform.tfvars
# Author: Sumit Sharma
# E-Mail: sumit.sharma@clustervision.com
# Date: 2024-08-05
# Description: This is an example Terraform Variables file. (This is an
#              autogenerated by the Ansible Playbook).
# Version: 1.0.0
# Status: Development
# License: GPL
# ------------------------------------------------------------------------------
# Notes:
# - This is an autogenerated file by the Ansible Playbook in the process of installation.
# - Update the default values will affect the infrastructure which is already created.
# - DO NOT EDIT THIS FILE, IF YOU ARE NOT SURE WHAT YOU ARE DOING.
# ------------------------------------------------------------------------------

# AWS Cloud Modules
aws_network     = true                                                                                                                                                                     
aws_vpn         = {{ 'true' if primary and on_controller and not in_cloud else 'false' }}                                                                                                  
aws_storage     = true                                                                                                                                                                     
aws_images      = true                                                                                                                                                                     
aws_controller  = {{ 'true' if aws_controller and aws_ctrl_hostname is defined else 'false' }}                                                                                         
aws_node        = {{ 'true' if aws_node else 'false' }}

# AWS Credentials
aws_region  = "{{ aws_location }}"
access_key  = "{{ aws_access_key }}"
secret_key  = "{{ aws_secret_key }}"

# AWS VPC
aws_vpc_name                    = "{{ aws_vpn_connection_name }}"
aws_vpc_cidr_block              = "{{ aws_cluster_net }}/{{ aws_cluster_netprefix }}"
aws_vpc_instance_tenancy        = "default"
aws_vpc_enable_dns_support      = true
aws_vpc_enable_dns_hostnames    = true

aws_vpc_subnet_name             = "TrinityX-VPC-Public-Subnet"
aws_vpc_subnet_cidr_block       = "{{ aws_cluster_net }}/{{ aws_cluster_netprefix }}"
aws_vpc_internet_gateway_name   = "TrinityX-VPC-Internet-Gateway"

aws_route_table_cidr_block  = "0.0.0.0/0"
aws_route_table_name        = "TrinityX-VPC-Public-Route-Table"

aws_network_acl_name    = "TrinityX-VPC-Public-NACL"
aws_network_acl_rules   = [
  {
    direction  = "egress"
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  },
  {
    direction  = "egress"
    protocol   = "udp"
    rule_no    = 110
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 500
    to_port    = 500
  },
  {
    direction  = "egress"
    protocol   = "udp"
    rule_no    = 120
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 4500
    to_port    = 4500
  },
  {
    direction  = "egress"
    protocol   = "udp"
    rule_no    = 130
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 53
    to_port    = 53
  },
  {
    direction  = "egress"
    protocol   = "tcp"
    rule_no    = 140
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 53
    to_port    = 53
  },
  {
    direction  = "ingress"
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  },
  {
    direction  = "ingress"
    protocol   = "udp"
    rule_no    = 110
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 500
    to_port    = 500
  },
  {
    direction  = "ingress"
    protocol   = "udp"
    rule_no    = 120
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 4500
    to_port    = 4500
  },
  {
    direction  = "ingress"
    protocol   = "udp"
    rule_no    = 130
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 53
    to_port    = 53
  },
  {
    direction  = "ingress"
    protocol   = "tcp"
    rule_no    = 140
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 53
    to_port    = 53
  }
]

aws_security_group_name   = "TrinityX-VPC-VPN-SG"
aws_security_group_rules  = [
  {
    direction   = "egress"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  },
  {
    direction   = "ingress"
    from_port   = 500
    to_port     = 500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow inbound VPN traffic"
  },
  {
    direction   = "ingress"
    from_port   = 4500
    to_port     = 4500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow inbound VPN traffic"
  },
  {
    direction   = "ingress"
    from_port   = 53
    to_port     = 53
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow inbound DNS traffic (UDP)"
  },
  {
    direction   = "ingress"
    from_port   = 53
    to_port     = 53
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow inbound DNS traffic (TCP)"
  },
  {
    direction   = "egress"
    from_port   = 500
    to_port     = 500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow outbound VPN traffic"
  },
  {
    direction   = "egress"
    from_port   = 4500
    to_port     = 4500
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow outbound VPN traffic"
  },
  {
    direction   = "egress"
    from_port   = 53
    to_port     = 53
    protocol    = "udp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow outbound DNS traffic (UDP)"
  },
  {
    direction   = "egress"
    from_port   = 53
    to_port     = 53
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow outbound DNS traffic (TCP)"
  },
  {
    direction   = "ingress"
    from_port   = 8
    to_port     = 8
    protocol    = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow inbound ICMP Echo Request (Ping)"
  },
  {
    direction   = "ingress"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow SSH"
  },
  {
    direction   = "ingress"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTP"
  },
  {
    direction   = "ingress"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTPS"
  },
  {
    direction   = "ingress"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow OOD 8080"
  },
  {
    direction   = "ingress"
    from_port   = 7050
    to_port     = 7050
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow TrinityX 7050"
  },
  {
    direction   = "ingress"
    from_port   = 7051
    to_port     = 7051
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow TrinityX 7051"
  }
]

# AWS VPN
aws_customer_gateway_name       = "TrinityX-Cloud"
aws_customer_gateway_bgp_asn    = 65000
aws_customer_gateway_ip_address = "{{ cloud_local_external_as_ip }}"
aws_customer_gateway_type       = "ipsec.1"

aws_vpn_gateway_name  = "TinityX-VPG"

aws_vpn_name                      = "TrinityX-VPN"
aws_vpn_connection_type           = "ipsec.1"
aws_vpn_static_routes_only        = true
aws_vpn_local_ipv4_network_cidr   = "{{ trix_cluster_net }}/{{ trix_cluster_netprefix }}"
aws_vpn_remote_ipv4_network_cidr  = "{{ aws_cluster_net }}/{{ aws_cluster_netprefix }}"

aws_vpn_connection_route_cidr_block = "{{ trix_cluster_net }}/{{ trix_cluster_netprefix }}"

# AWS S3
aws_s3_bucket_prefix            = "trinityx"
aws_s3_force_destroy            = true
aws_s3_bucket_name_tag          = "TrinityX Bucket"
aws_s3_bucket_env               = "Dev"
aws_s3_bucket_versioning        = "Enabled"
aws_s3_bucket_enc_algorithm     = "AES256"
aws_s3_bucket_key               = true
aws_s3_block_public_acls        = true
aws_s3_block_public_policy      = true
aws_s3_ignore_public_acls       = true
aws_s3_restrict_public_buckets  = true

# AWS Image
aws_s3_object_key_path      = "images/{{ vhd_name }}.vhd"
aws_s3_object_source        = "{{ trix_images }}/{{ vhd_name }}.vhd"
aws_s3_object_content_type  = "application/octet-stream"
aws_s3_object_encryption    = "AES256"

aws_iam_role_name           = "TrinityImageRole"
aws_iam_role_policy_version = "2012-10-17"
aws_iam_role_policy_effect  = "Allow"
aws_iam_role_policy_service = "vmie.amazonaws.com"
aws_iam_role_policy_action  = "sts:AssumeRole"

aws_iam_role_policy_ec2_access  = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
aws_iam_role_policy_ec2_role    = "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
aws_iam_role_policy_s3_access   = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
aws_iam_role_policy_s3_read     = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

aws_image_license_type      = "BYOL"
aws_image_boot_mode         = "uefi"
aws_image_description       = "TrinityX-Compute"
aws_image_platform          = "Linux"
aws_image_role              = "TrinityImageRole"
aws_image_container_format  = "vhd"
aws_image_container_desc    = "Linux"

# AWS Controller
aws_controller_ami_latest         = true
aws_controller_ami_filter_by      = "name"
aws_controller_ami_filter_values  = "{{ aws_controller_ami_filter_values }}"
aws_controller_ami_owners         = {{ aws_controller_ami_owners }}

aws_controller_instance_type        = "t3.xlarge"
aws_controller_automatic_public_ip  = false
aws_controller_root_device_size     = 64
aws_controller_root_device_type     = "gp2"
aws_controller_name                 = "TrinityX-Controller"
aws_controller_ip                   = "{{ aws_ctrl_ip }}"
aws_controller_eip_domain           = "vpc"
aws_controller_ssh_public_key       = "{{ cloud_ssh_public_key }}"
aws_controller_os_username          = "root"
aws_controller_os_password          = "{{ cloud_psk_secret }}"

# AWS Node
aws_hostlist                  = "{{ aws_nodes }}"
aws_node_instance_type        = "{{ aws_node_type }}"
aws_node_automatic_public_ip  = false
aws_node_root_device_size     = {{ aws_node_disk_size }}
aws_node_root_device_type     = "gp2"

# AWS Import Variables
ami_id            = ""
vpc_id            = ""
public_subnet_id  = ""
sg_id             = ""

