---
# tasks file for nfs-mounts

- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}.yaml"
  ignore_errors: true

- name: Install nfs packages
  yum:
    name: '{{ nfs_packages }}'
    state: present
  when: ansible_facts['os_family'] == "RedHat"

- name: Install nfs packages
  apt:
    name: '{{ nfs_packages }}'
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Ensure mountpoints exist
  file:
    path: '{{ item.path }}'
    owner: root
    group: root
    mode: '0755'
    state: directory
  with_items: '{{ nfs_mounts }}'

- block:
  - name: Render nfs_mounts based on shared_fs_disks info
    set_fact:
      nfs_mounts_: "{{ nfs_mounts_|d([]) + [item|combine({'remote': _remote|from_yaml})] }}"
    loop: "{{ nfs_mounts }}"
    vars:
      _remote: |
        {% if item.path in shared_fs_disks | map(attribute="name") %}
          {% for disk in shared_fs_disks %}
            {% if disk.name == item.path %}
              {% if disk["type"] == "nfs" %}
                {{ disk["remote"] }}
              {% else %}
                {{ item.remote }}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% else %}
          {{ item.remote }}
        {% endif %}

  - name: Overwrite nfs_mounts fact
    set_fact:
      new_nfs_mounts: "{{ nfs_mounts_ }}"
  when: 
    - shared_fs_disks is defined
    - shared_fs_disks | length > 0

- name: Overwrite nfs_mounts fact
  set_fact:
    new_nfs_mounts: "{{ nfs_mounts }}"
  when: nfs_mounts_ is not defined

- name: Setup NFS mounts
  mount:
    path: '{{ item.path }}'
    src: '{{ item.remote }}'
    fstype: 'nfs'
    opts: '{{ item.options }},proto={{ "rdma" if nfs_enable_rdma else "tcp" }}'
    state: '{{ "present" if ansible_connection in "chroot" else "mounted" }}'
  with_items: '{{ new_nfs_mounts }}'
  when: ansible_facts['os_family'] == "RedHat"

- name: Setup NFS mounts
  mount:
    path: '{{ item.path }}'
    src: '{{ item.remote }}'
    fstype: 'nfs'
    opts: '{{ item.options }}'
    state: '{{ "present" if ansible_connection in "chroot" else "mounted" }}'
  with_items: '{{ new_nfs_mounts }}'
  when: ansible_facts['os_family'] == "Debian"
