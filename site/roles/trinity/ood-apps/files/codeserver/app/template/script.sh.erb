<%

# Set our working directory.
codeserver_working_dir = Pathname.new(context.codeserver_working_dir)

codeserver_version   = context.codeserver_version

# Ensure that code-server always starts up in either a user defined directory or the home directory.
if ! codeserver_working_dir.exist?
    codeserver_working_dir = Pathname.new(ENV['HOME'])
elsif codeserver_working_dir.file?
    codeserver_working_dir = codeserver_working_dir.parent
end
%>

CODE_SERVER_DATAROOT="$HOME/.local/share/code-server"
mkdir -p "$CODE_SERVER_DATAROOT/extensions"

# Expose the password to the server.
export PASSWORD="$password"

# Print compute node.
echo "$(date): Running on compute node ${compute_node}:$port"

# VSCode complains that system git is too old.
module load project/ondemand git app_code_server/<%= codeserver_version %>

CPP_FILE="<%= codeserver_working_dir.to_s %>/.vscode/c_cpp_properties.json"

if [[ -f "$CPP_FILE" ]]; then
    CPP_DIR="${TMPDIR:=/tmp/$USER}/cpp-vscode"
    mkdir -p "$CPP_DIR"
    chmod 700 "$CPP_DIR"

    # if the file is empty, let's initialize it
    [ -s "$CPP_FILE" ] || echo '{"configurations": [{ "name": "Linux", "browse": { "databaseFilename": null }}], "version": 4}' > "$CPP_FILE"

    jq --arg dbfile "$CPP_DIR/cpp-vscode.db" \
      '.configurations[0].browse.databaseFilename = $dbfile' \
      "$CPP_FILE" > "$CPP_FILE".new

    mv "$CPP_FILE".new "$CPP_FILE"
  fi

#
# Start Code Server.
#
echo "$(date): Started code-server"
echo ""

code-server \
    --auth="password" \
    --bind-addr="0.0.0.0:${port}" \
    --disable-telemetry \
    --ignore-last-opened \
    --user-data-dir="$CODE_SERVER_DATAROOT" \
    --log debug \
    "<%= codeserver_working_dir.to_s %>"