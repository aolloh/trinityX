---
- name: Install packages on controller or login image if required
  when: ood_apps_build_for_image|default(False)|bool == true or ansible_connection not in 'chroot'
  block:
    - name: Install required yum packages
      ansible.builtin.dnf:
        name: "{{ item.name }}"
        state: present
        disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
        enablerepo: "{{ item.enablerepo | default('') }}"
      loop: "{{ app.get('controller_rpms', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"

- name: Gather variables and setup folder for app {{ app.name }}
  when: ood_apps_build_for_image|default(False)|bool == true or ansible_connection not in 'chroot'
  block:
    - name: Register app path
      set_fact:
        app_path: "{{ ood_apps_path }}/{% if app.type | default(None) %}{{ app.type }}_{% endif %}{{ app.name }}"    
    - name: Register app enabled
      set_fact:
        app_enabled: "{{ (app.get('type') != 'bc') or (app.name in ood_enable_interactive_apps) }}"

    - name: Debug app
      debug:
        var: app

    - name: Debug app_enabled
      debug:
        var: app_enabled

    - name: Make folder for app {{ app.name }}
      ansible.builtin.file:
        path: "{{ app_path }}"
        state: directory
        mode: "{{ '0000' if (not app_enabled) else (app.mode | default('0755')) }}"
        owner: "{{ app.owner | default('root') }}"
        group: "{{ app.group | default(ood_apps_admin_group) }}"
        follow: true
      notify: Run update_ood

- name: Configure controller for app {{ app.name }}
  when:
    - ood_apps_build_for_image|default(False)|bool == true or ansible_connection not in 'chroot'
    - app_enabled
  block:
    - name: Make folders for app {{ app.name }}
      ansible.builtin.file:
        path: "{{ app_path }}/{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'files/{{ app.name }}/app', wantlist=True) }}"
      when: 
        - item.state == 'directory'
        - app.get('override') | default(override, true) | default((app_path + '/' + item.path) is not exists, true)

    - name: Copy files for app {{ app.name }}
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ app_path }}/{{ item.path }}"
        mode: "preserve"
        owner: root
        group: root
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'files/{{ app.name }}/app', wantlist=True) }}"
      when: 
        - item.state == 'file'
        - app.get('override') | default(override, true) | default((app_path + '/' + item.path) is not exists, true)

    - name: Render files for app {{ app.name }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ app_path }}/{{  item.path | replace('.j2', '') }}"
        mode: "0644"
        owner: root
        group: root
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'templates/{{ app.name }}/app', wantlist=True) }}"
      when: 
        - item.state == 'file'
        - app.get('override') | default(override, true) | default((app_path + '/' + item.path.replace('.j2', '')) is not exists, true)

    - name: Render module file for app {{ app.name }}
      ansible.builtin.template:
        src: "{{ app.name }}/module.lua.j2"
        dest: "{{ trix_shared }}/modulefiles/ood-{{ app.name }}.lua"
        mode: "0644"
        owner: root
        group: root
      notify: Run update_ood
      when: 
        # - "('templates/' + app.name + '/module.lua.j2') is exists "
        - app.get('override') | default(override, true) | default((trix_shared + '/modulefiles/ood-' + app.name + '.lua') is not exists, true)
      failed_when: false
    
    - name: Include additional tasks for app {{ app.name }}
      include_tasks: "{{ item }}"
      loop: "{{ app.get('tasks', []) }}"


# We do install the apps in the login image as it gives freedom and with the
# scheduler we can deside whether to use the login node or not
- name: Install packages on node if required
  when:
    - ansible_connection in 'chroot'
    - ansible_facts['os_family'] == "RedHat"
  block:
    - name: Install required yum packages
      ansible.builtin.dnf:
        name: "{{ item.name }}"
        state: present
        disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
        enablerepo: "{{ item.enablerepo | default('') }}"
      loop: "{{ app.get('node_rpms', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"


- name: Install APT packages on controller if required
  when:
    - ansible_connection not in 'chroot'
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  block:
    - name: Install Code Server 4.89.0
      ansible.builtin.apt:
        deb: "{{ item.name }}"
        state: present
      loop: "{{ app.get('node_apts', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"
