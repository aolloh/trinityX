---
- name: Install packages on controller if required
  when:
    - ansible_connection not in 'chroot'
  block:
    - name: Install required yum packages
      ansible.builtin.dnf:
        name: "{{ item.name }}"
        state: present
        disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
        enablerepo: "{{ item.enablerepo | default('') }}"
      loop: "{{ app.get('controller_rpms', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"

- name: Configure controller for app {{ app.name }}
  when:
    - ansible_connection not in 'chroot'
  block:
    - name: Make folder for app {{ app.name }}
      ansible.builtin.file:
        path: "{{ ood_apps_path }}/{% if app.type != 'other' %}{{ app.type }}_{% endif %}{{ app.name }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      notify: Run update_ood
      
    - name: Make folders for app {{ app.name }}
      ansible.builtin.file:
        path: "{{ ood_apps_path }}/{% if app.type != 'other' %}{{ app.type }}_{% endif %}{{ app.name }}/{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'files/{{ app.name }}/app', wantlist=True) }}"
      when: item.state == 'directory'

    - name: Copy files for app {{ app.name }}
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ ood_apps_path }}/{% if app.type != 'other' %}{{ app.type }}_{% endif %}{{ app.name }}/{{ item.path }}"
        mode: "preserve"
        owner: root
        group: root
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'files/{{ app.name }}/app', wantlist=True) }}"
      when: item.state == 'file'

    - name: Render files for app {{ app.name }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ ood_apps_path }}/{% if app.type != 'other' %}{{ app.type }}_{% endif %}{{ app.name }}/{{  item.path | regex_replace('[.]j2$', '') }}"
        mode: "0644"
        owner: root
        group: root
      notify: Run update_ood
      loop: "{{ lookup('community.general.filetree', 'templates/{{ app.name }}/app', wantlist=True) }}"
      when: item.state == 'file'

    - name: Render module file for app {{ app.name }}
      ansible.builtin.template:
        src: "{{ app.name }}/module.lua.j2"
        dest: "{{ trix_shared }}/modulefiles/ood-{{ app.name }}.lua"
        mode: "0644"
        owner: root
        group: root
      notify: Run update_ood
      # loop: "{{ lookup('community.general.filetree', 'templates/' + app.name + '/module.lua.j2', wantlist=True) }}"
      # when: item.state == 'file'
      failed_when: false

    # - name: Set template scripts to executable
    #   ansible.builtin.file:
    #     path: "{{ ood_apps_path }}/{% if app.type != 'other' %}{{ app.type }}_{% endif %}{{ app.name }}/template/{{ item.path }}"
    #     mode: "0755"
    #   notify: Run update_ood
    #   loop: "{{ lookup('community.general.filetree', 'files/{{ app.name }}/app/template/', wantlist=True) }}"
    #   when: item.state == 'file'

    - name: Set correct permissions to app folders and create them if they don't exist
      ansible.builtin.file:
        path: /var/www/ood/apps/sys/{{ app.name }}
        state: directory
        mode: "{{ app.mode | default('0755') }}"
        owner: "{{ app.owner | default('root') }}"
        group: "{{ ood_apps_admin_group }}"
        follow: true
      notify: Run update_ood


- name: Install packages on node if required
  when:
    - ansible_connection in 'chroot'
    - ansible_facts['os_family'] == "RedHat"
  block:
    - name: Install required yum packages
      ansible.builtin.dnf:
        name: "{{ item.name }}"
        state: present
        disable_gpg_check: "{{ item.no_gpgcheck | default(False) }}"
        enablerepo: "{{ item.enablerepo | default('') }}"
      loop: "{{ app.get('node_rpms', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"


- name: Install APT packages on controller if required
  when:
    - ansible_connection not in 'chroot'
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  block:
    - name: Install Code Server 4.89.0
      ansible.builtin.apt:
        deb: "{{ item.name }}"
        state: present
      loop: "{{ app.get('node_apts', []) }}"
      retries: "{{ rpm_retries | default(3) }}"
      delay: "{{ rpm_delay | default(15) }}"