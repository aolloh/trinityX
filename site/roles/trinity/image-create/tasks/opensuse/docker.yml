---
- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "{{ package_arch }}/docker-{{ image_create_distribution }}.yaml"

- name: Prepare paths in image
  file:
    path: "{{ image_path }}/{{ item }}"
    state: directory
  with_items:
    - /etc/yum.repos.d
    - /var/lib/rpm
    - /etc/pki/rpm-gpg
    - /dev/pts

- name: Create {{ image_path }}/dev
  file:
    path: "{{ image_path }}/dev/"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Create basic /dev files
  command: "/usr/bin/mknod {{ image_path }}/dev/{{ item.dev }} {{ item.t }} {{ item.ma }} {{ item.mi }} creates={{ image_path }}/dev/{{ item.dev }}"
  args:
    creates: "{{ image_path }}/dev/{{ item.dev }}"
  with_items:
    - {dev: "null", mo: "666", t: 'c', ma: 1, mi: 3}  # device, mode, type, major, minor
    - {dev: "zero", mo: "666", t: 'c', ma: 1, mi: 5}
    - {dev: "random", mo: "666", t: 'c', ma: 1, mi: 8}
    - {dev: "urandom", mo: "666", t: 'c', ma: 1, mi: 9}
    - {dev: "console", mo: "600", t: 'c', ma: 5, mi: 1}
    - {dev: "ptmx", mo: "666", t: 'c', ma: 5, mi: 2}
    - {dev: "tty", mo: "666", t: 'c', ma: 5, mi: 0}
    - {dev: "pts/0", mo: "620", t: 'c', ma: 136, mi: 0}
    - {dev: "pts/1", mo: "620", t: 'c', ma: 136, mi: 1}
    - {dev: "pts/ptmx", mo: "000", t: 'c', ma: 5, mi: 2}

- name: Create /dev/fd
  file:
    src: "/proc/self/fd"
    dest: "{{ image_path }}/dev/fd"
    force: true
    state: link

- name: Copy the rpm gpg key to the image
  copy:
    src: /usr/share/distribution-gpg-keys/opensuse/RPM-GPG-KEY-openSUSE
    dest: "{{ image_path }}/etc/pki/rpm-gpg/"

- name: Configure TrinityX repos
  ansible.builtin.yum_repository:
    name: "{{ item.name }}"
    description: "{{ item.name }}"
    baseurl: "{{ item.repo }}"
    gpgcheck: "{{ item.gpgcheck | default(False) }}"
    gpgkey: "{{ 'file://' + item.gpgkey if item.gpgcheck else '' }}"
    reposdir: "{{ image_path + '/etc/yum.repos.d/' }}"
  with_items: "{{ trinityx_repositories }}"
  when: item.name is defined
  tags: repos

- name: Collecting repo names for next task
  set_fact:
    _repos_inside_image_remove: "{{ _repos_inside_image_remove|default([]) + [ 'zypper rr '+item.name ] }}"
    _repos_inside_image_add: "{{ _repos_inside_image_add|default([]) + [ 'zypper ar /etc/yum.repos.d/'+item.name+'.repo' ] }}"
  with_items: "{{ trinityx_repositories }}"
  when: item.name is defined

- name: Prepare zypper to work
  block:
  - name: Running shell commands inside image
    shell: "chroot {{ image_path }} {{ item }}"
    with_items:
      - mount proc -t proc /proc
#      - /usr/sbin/update-ca-certificates
#      - rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-openSUSE
#      - zypper rr opensuse
#      - zypper ar /etc/yum.repos.d/opensuse.repo
      - "{{ _repos_inside_image_remove|default([]) }}"
      - "{{ _repos_inside_image_add|default([]) }}"
      - zypper --gpg-auto-import-keys refresh
      - zypper up --replacefiles --no-confirm
      - umount /proc
  rescue:
  - name: Tasks in image before leaving playbook
    shell: "chroot {{ image_path }} {{ item }}"
    with_items:
      - umount /proc

- name: Configuring resolv.conf
  copy:
    dest: "{{ image_path }}/etc/resolv.conf"
    content: "nameserver {{ trix_ctrl_ip }}"

- name: Install core packages - @core, kernel and grub2
  shell: "chroot {{ image_path }} zypper --non-interactive in {{ item }}"
  with_items: "{{ image_core_packages }}"
  retries: "{{ rpm_retries | default(3) }}"
  delay: "{{ rpm_delay | default(15) }}"

- name: Reinstall packages
  shell: "chroot {{ image_path }} zypper --force --non-interactive in {{ item }}"
  with_items: "{{ image_reinstall_packages }}"
  retries: "{{ rpm_retries | default(3) }}"
  delay: "{{ rpm_delay | default(15) }}"

- name: Enabling services
  shell: "chroot {{ image_path }} systemctl enable {{ item }} || true"
  with_items:
    - NetworkManager
    - sshd
  ignore_errors: true

