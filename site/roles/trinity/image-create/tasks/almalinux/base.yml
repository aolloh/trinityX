---
- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "image-{{ image_create_distribution }}.yaml"
  ignore_errors: true

- name: Install dnf-utils
  dnf:
    disable_gpg_check: true
    name: dnf-utils
    state: present
  retries: "{{ network_retries | default(3) }}"
  delay: "{{ network_delay | default(15) }}"

- name: Check OS release on controller
  command: rpm -qf /etc/os-release --qf '%{NAME}'
  register: os_release_rpm
  changed_when: false

- name: Copy local dnf.conf
  copy:
    src: "/etc/dnf/dnf.conf"
    dest: "{{ image_path }}/etc/dnf/"

- name: Copy local dnf variables
  copy:
    src: "/etc/dnf/vars"
    dest: "{{ image_path }}/etc/dnf/"

##
## The new releasever option in the dnf module actually doesn't do anything...
## Workaround until it's fixed.
##

- name: Create dnf base directory
  file:
    path: "{{ image_path }}/etc/dnf/vars/"
    state: directory
  when: ansible_distribution == "RedHat"

- name: Add releasever variable
  copy:
    content: "{{ ansible_distribution_major_version }}"
    dest: "{{ image_path }}/etc/dnf/vars/releasever"
  when: ansible_distribution == "CentOS"

##- name: Add releasever variable
##  copy:
##   content: "7Server\n"
##    dest: "{{ image_path }}/etc/dnf/vars/releasever"
##  when: ansible_distribution == "RedHat"

- name: Touch config files for RedHat
  file:
    path: "{{ item }}"
    state: touch
  with_items:
    - /etc/sysconfig/network
    - /etc/resolv.conf
  when: ansible_distribution == "RedHat"

- name: Install {{ os_release_rpm.stdout }} package in {{ image_path }}
  dnf:
    disable_gpg_check: true
    name: "{{ os_release_rpm.stdout }}"
    # releasever: "{{ ansible_distribution_major_version }}"
    installroot: "{{ image_path }}"
    state: present
  retries: "{{ network_retries | default(3) }}"
  delay: "{{ network_delay | default(15) }}"

- name: Install dnf package in {{ image_path }}
  dnf:
    disable_gpg_check: true
    name:
      - yum
      - dnf
    installroot: "{{ image_path }}"
    state: present
  retries: "{{ network_retries | default(3) }}"
  delay: "{{ network_delay | default(15) }}"

- synchronize:
    src: "/etc/pki/"
    dest: "{{ image_path }}/etc/pki/"
  when: ansible_distribution == "RedHat"

- name: Create {{ image_path }}/dev
  file:
    path: "{{ image_path }}/dev/"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Create basic /dev files
  command: "/usr/bin/mknod {{ image_path }}/dev/{{ item.dev }} {{ item.t }} {{ item.ma }} {{ item.mi }} creates={{ image_path }}/dev/{{ item.dev }}"
  args:
    creates: "{{ image_path }}/dev/{{ item.dev }}"
  with_items:
    - {dev: "null", mo: "666", t: 'c', ma: 1, mi: 3}  # device, mode, type, major, minor
    - {dev: "zero", mo: "666", t: 'c', ma: 1, mi: 5}
    - {dev: "random", mo: "666", t: 'c', ma: 1, mi: 8}
    - {dev: "urandom", mo: "666", t: 'c', ma: 1, mi: 9}
    - {dev: "console", mo: "600", t: 'c', ma: 5, mi: 1}
    - {dev: "ptmx", mo: "666", t: 'c', ma: 5, mi: 2}
    - {dev: "tty", mo: "666", t: 'c', ma: 5, mi: 0}


# commented block not needed? image setup will generate repos and below is using repos on controller - Antoine
#
# - name: Include trinity/roles
#  ansible.builtin.include_role:
#    name: trinity/repos
#  vars:
#    params:
#       install_root: "{{ image_path }}"
#  tags: repos

- block:

  - name: Set up local repository
    yum_repository:
      name: "{{ trix_local_reponame }}"
      baseurl: "{{ trix_local_repo_baseurl }}"
      description: "{{ trix_local_reponame }}"
      gpgcheck: false
      enabled: true
      reposdir: "{{ image_path }}/etc/yum.repos.d"

  - name: Disable all repo without '*-local' suffix
    shell: >
      yum-config-manager --installroot={{ image_path }} \
      | sed -n 's/^\[\(.*\)\]$/\1/p' \
      | egrep -v "\-local$" \
      | xargs yum-config-manager --installroot={{ image_path }} --disable {}
    args:
      warn: false

  when: local_install | default(False)

- name: Disable epel repo for local installation
  shell: >
    yum-config-manager --installroot={{ image_path }} --disable epel
  args:
    warn: false
  when: local_install | default(False)

- name: Install core packages - @core, kernel and grub2
  dnf:
    disable_gpg_check: true
    name: "{{ image_core_packages }}"
    state: present
    installroot: "{{ image_path }}"
  retries: "{{ network_retries | default(3) }}"
  delay: "{{ network_delay | default(15) }}"

- name: Install missing elfutils-libs on RedHat
  dnf:
    disable_gpg_check: true
    name: "elfutils-libs"
    state: present
    installroot: "{{ image_path }}"
  when: ansible_distribution == "RedHat"
  retries: "{{ network_retries | default(3) }}"
  delay: "{{ network_delay | default(15) }}"
