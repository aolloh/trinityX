---
- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This module only works with systemd"

- name: Install package fact dependencies
  become: true
  ansible.builtin.package:
    name: "{{ _pkg_fact_req }}"
    state: present
  when: (_pkg_fact_req)
  vars:
    _pkg_fact_req: "{% if (ansible_pkg_mgr == 'apt') %}\
                    {{ ('python-apt' if ansible_python_version is version('3', '<') else 'python3-apt') }}
                    {% else %}\
                    {% endif %}"

- name: Gather package facts
  ansible.builtin.package_facts:
  when: "not 'packages' in ansible_facts"

- name: Assert that used version supports listen address type
  ansible.builtin.assert:
    that:
      - >-
        prometheus_alertmanager_web_listen_address is string
        or
        (
          prometheus_alertmanager_version is version('0.25.0', '>=') and
          prometheus_alertmanager_web_listen_address | type_debug == "list"
        )

- name: Naive assertion of proper listen address
  ansible.builtin.assert:
    that:
      - >-
        [prometheus_alertmanager_web_listen_address] |
          flatten |
          reject('match', '.+:\\d+$') |
          list |
          length == 0

- name: Discover latest version
  ansible.builtin.set_fact:
    prometheus_alertmanager_version: "{{ (lookup('url', 'https://api.github.com/repos/{{ _prometheus_alertmanager_repo }}/releases/latest', headers=_github_api_headers,
                           split_lines=False) | from_json).get('tag_name') | replace('v', '') }}"
  run_once: true
  until: prometheus_alertmanager_version is version('0.0.0', '>=')
  retries: 10
  when:
    - prometheus_alertmanager_version == "latest"
    - prometheus_alertmanager_binary_local_dir | length == 0
    - not prometheus_alertmanager_skip_install

- name: Get alertmanager binary checksum
  when:
    - prometheus_alertmanager_binary_local_dir | length == 0
    - not prometheus_alertmanager_skip_install
  block:
    - name: "Get checksum list"
      ansible.builtin.set_fact:
        __prometheus_alertmanager_checksums: "{{ lookup('url', prometheus_alertmanager_checksums_url, headers=_github_api_headers, wantlist=True) | list }}"
      run_once: true
      until: __prometheus_alertmanager_checksums is search('linux-' + go_arch + '.tar.gz')
      retries: 10

    - name: "Get checksum for {{ go_arch }}"
      ansible.builtin.set_fact:
        __prometheus_alertmanager_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ __prometheus_alertmanager_checksums }}"
      when:
        - "('linux-' + go_arch + '.tar.gz') in item"


- name: Fail when extra config flags are duplicating ansible variables
  ansible.builtin.fail:
    msg: "Detected duplicate configuration entry. Please check your ansible variables and role README.md."
  when:
    (prometheus_alertmanager_config_flags_extra['config.file'] is defined) or
    (prometheus_alertmanager_config_flags_extra['storage.path'] is defined) or
    (prometheus_alertmanager_config_flags_extra['web.listen-address'] is defined) or
    (prometheus_alertmanager_config_flags_extra['web.external-url'] is defined)

- name: Fail when there are no receivers defined
  ansible.builtin.fail:
    msg: "Configure alert receivers (`prometheus_alertmanager_receivers`). Otherwise alertmanager won't know where to send alerts."
  when:
    - prometheus_alertmanager_config_file == 'prometheus_alertmanager.yml.j2'
    - prometheus_alertmanager_receivers == []

- name: Fail when there is no alert route defined
  ansible.builtin.fail:
    msg: "Configure alert routing (`prometheus_alertmanager_route`). Otherwise alertmanager won't know how to send alerts."
  when:
    - prometheus_alertmanager_config_file == 'prometheus_alertmanager.yml.j2'
    - prometheus_alertmanager_route == {}

- name: "DEPRECATION WARNING: alertmanager version 0.15 and earlier are no longer supported and will be dropped from future releases"
  failed_when: false
  ansible.builtin.fail:
    msg: "Please use `prometheus_alertmanager_version >= v0.16.0`"
  when: prometheus_alertmanager_version is version_compare('0.16.0', '<')

- name: Check deprecated variable `prometheus_alertmanager_cli_flags`
  when: prometheus_alertmanager_cli_flags is defined
  block:
    - name: Backward compatibility of variable [part 1]
      ansible.builtin.set_fact:
        prometheus_alertmanager_config_flags_extra: "{{ prometheus_alertmanager_cli_flags }}"

    - name: "DEPRECATION WARNING: `prometheus_alertmanager_cli_flags` is no longer supported and will be dropped from future releases"
      failed_when: false
      ansible.builtin.fail:
        msg: "Please use `prometheus_alertmanager_config_flags_extra` instead of `prometheus_alertmanager_cli_flags`"

- name: Check deprecated variable `prometheus_alertmanager_listen_address`
  when: prometheus_alertmanager_listen_address is defined
  block:
    - name: Backward compatibility of variable [part 2]
      ansible.builtin.set_fact:
        prometheus_alertmanager_web_listen_address: "{{ prometheus_alertmanager_listen_address }}"

    - name: "DEPRECATION WARNING: `prometheus_alertmanager_listen_address` is no longer supported and will be dropped from future releases"
      failed_when: false
      ansible.builtin.fail:
        msg: "Please use `prometheus_alertmanager_web_listen_address` instead of `prometheus_alertmanager_listen_address`"

- name: Check deprecated variable `prometheus_alertmanager_external_url`
  when: prometheus_alertmanager_external_url is defined
  block:
    - name: Backward compatibility of variable [part 3]
      ansible.builtin.set_fact:
        prometheus_alertmanager_web_external_url: "{{ prometheus_alertmanager_external_url }}"

    - name: "DEPRECATION WARNING: `prometheus_alertmanager_external_url` is no longer supported and will be dropped from future releases"
      failed_when: false
      ansible.builtin.fail:
        msg: "Please use `prometheus_alertmanager_web_external_url` instead of `prometheus_alertmanager_external_url`"

- name: Check deprecated variable `prometheus_alertmanager_mesh`
  when: prometheus_alertmanager_mesh is defined
  block:
    - name: HA config compatibility with alertmanager<0.15.0
      ansible.builtin.set_fact:
        prometheus_alertmanager_cluster: "{{ prometheus_alertmanager_mesh }}"

    - name: "DEPRECATION WARNING: `prometheus_alertmanager_mesh` is no longer supported and will be dropped from future releases"
      failed_when: false
      ansible.builtin.fail:
        msg: "Please use `prometheus_alertmanager_cluster` instead of `prometheus_alertmanager_cluster`"

- name: "`prometheus_alertmanager_child_routes` is no longer supported"
  ansible.builtin.fail:
    msg: "Please move content of `prometheus_alertmanager_child_routes` to `prometheus_alertmanager_route.routes` as the former variable is deprecated
          and will be removed in future versions."
  when: prometheus_alertmanager_child_routes is defined

- name: "`prometheus_alertmanager_time_intervals` is only supported on version 0.22.0. Please upgrade to this version."
  ansible.builtin.fail:
    msg: "To use `prometheus_alertmanager_time_intervals`,
          Please upgrade to AlertManager 0.22.0 or newer."
  when:
    - prometheus_alertmanager_version is version_compare('0.22.0', '<')
    - prometheus_alertmanager_time_intervals is defined

- name: "Check that both prometheus_alertmanager_auth_user and prometheus_alertmanager_auth_password are valid if one of them is defined"
  assert:
    that:
      - prometheus_alertmanager_auth_user is defined
      - prometheus_alertmanager_auth_password is defined
      - prometheus_alertmanager_auth_user | length > 0
      - prometheus_alertmanager_auth_password | length > 0
    msg: "Both prometheus_alertmanager_auth_user and prometheus_alertmanager_auth_password must be defined if one of them is defined"
  when:
    - (prometheus_alertmanager_auth_user is defined) or (prometheus_alertmanager_auth_password is defined)