---
- name: "Collect prometheus_alertmanager_auth_user from prometheus_alertmanager_auth.credentials_file filename"
  ansible.builtin.set_fact:
    prometheus_alertmanager_auth_user: "{{ prometheus_alertmanager_auth.credentials_file | basename | replace('.txt', '') }}"
  when: prometheus_alertmanager_auth.credentials_file is defined

- name: "Collect prometheus_alertmanager_auth_password from prometheus_alertmanager_auth.credentials_file"
  ansible.builtin.set_fact:
    prometheus_alertmanager_auth_password: "{{ lookup('password', prometheus_alertmanager_auth.credentials_file, chars=['ascii_letters','digits','hexdigits']) }}"
  when: prometheus_alertmanager_auth.credentials_file is defined

- name: Copy alertmanager config
  ansible.builtin.template:
    force: true
    src: alertmanager.yml.j2
    dest: "{{ prometheus_alertmanager_config_dir }}/alertmanager.yml"
    owner: "{{prometheus_alertmanager_system_user}}"
    group: "{{prometheus_alertmanager_system_group}}"
    mode: 0644
    validate: "{{ _prometheus_alertmanager_binary_install_dir }}/amtool check-config %s"
  notify:
    - restart prometheus-alertmanager

- name: Copy alertmanager web config
  ansible.builtin.template:
    force: true
    src: 'alertmanager.web.yml.j2'
    dest: "{{ prometheus_alertmanager_config_dir }}/alertmanager.web.yml"
    owner: "{{prometheus_alertmanager_system_user}}"
    group: "{{prometheus_alertmanager_system_group}}"
    mode: 0644
  notify:
    - restart prometheus-alertmanager

- name: Copy alertmanager template files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ prometheus_alertmanager_config_dir }}/templates/"
    force: true
    owner: "{{prometheus_alertmanager_system_user}}"
    group: "{{prometheus_alertmanager_system_group}}"
    mode: 0644
  with_fileglob: "{{ prometheus_alertmanager_template_files }}"
  notify:
    - restart prometheus-alertmanager

- name: Configure firewalld
  firewalld:
    state: enabled
    port: "{{ prometheus_alertmanager_web_listen_port }}/tcp"
    permanent: "yes"
    immediate: "yes"
  when: ansible_virtualization_type != 'docker'