---

- block:
  - name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
    include_vars: "{{ item }}"
    with_first_found:
      - "{{ ansible_distribution }}{{ ansible_distribution_major_version}}.yaml"
      - "{{ ansible_os_family }}{{ ansible_distribution_major_version}}.yaml"
    ignore_errors: true

  - name: Install H/A packages
    yum:
      name: '{{ ha_packages }}'
      state: present
      enablerepo: ha

  - name: Verify if corosync key exists
    stat:
      path: "{{ trix_shared }}/corosync/authkey"
    register: stat_corosync_key

  - block:
    - name: Ensure corosync shared directory exists
      file:
        path: '{{ trix_shared }}/corosync'
        state: directory

    - name: Create corosync key
      shell: "corosync-keygen"

    - name: Copy corosync key to shared storage
      copy:
        src: '/etc/corosync/authkey'
        dest: '{{ trix_shared }}/corosync/'
    when: not stat_corosync_key.stat.exists

#  - name: Fetching network config
#    shell: 'ipcalc 10.141.255.254/16 -n|cut -f2 -d'=''

  - name: Configure corosync
    template:
      src: "corosync.conf.j2"
      dest: "/etc/corosync/corosync.conf"
#    notify:
#      - restart nscd

  # TODO: better way than below
  - name: Install PCS
    ansible.builtin.shell: |
      source /trinity/local/python/bin/activate
      pip3 install --upgrade {{ pcs_noarch_pip_repository }}/{{ pcs_pip }}
      exit $?
    args:
      executable: /bin/bash
    when: pcs_pip is defined

  # TODO: better way than below
  - name: Install PCS
    ansible.builtin.shell: |
      source /trinity/local/python/bin/activate
      pip3 install --upgrade -i {{ pcs_noarch_pip_repository }}/ pcs
      exit $?
    args:
      executable: /bin/bash
    when: pcs_pip is not defined

  - name: Install PCS wrapper
    copy:
      src: 'pcs'
      dest: '/usr/local/sbin/'
      owner: 'root'
      group: 'root'
      mode: '0755'

  when: ha | default(False)

