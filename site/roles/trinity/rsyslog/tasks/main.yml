---
# tasks file for rsyslog

- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}.yaml"
  ignore_errors: true

- name: Install rsyslog
  package:
    name: "{{ rsyslog_package }}"
    state: installed
#  when: ansible_facts['os_family'] == "RedHat"
  retries: "{{ rpm_retries | default(3) }}"
  delay: "{{ rpm_delay | default(15) }}"

#- name: Install rsyslog
#  apt:
#    name: rsyslog
#    state: present
#  when: ansible_facts['os_family'] == "Debian"

#- name: Install rsyslog
#  zypper:
#    name: syslog-ng
#    state: present
#  when: ansible_facts['os_family'] == "Suse"

- name: Configure listeners
  blockinfile:
    path: '{{ rsyslog_config_location }}/{{ item.proto | lower }}-listeners.conf'
    create: true
    owner: root
    group: root
    block: |
      $ModLoad im{{ item.proto | lower }}
      ${{ 'Input' if item.proto|lower == 'tcp' else '' }}{{ item.proto | upper }}ServerRun {{ item.port }}
  with_items: '{{ syslog_listeners }}'
  notify: restart rsyslog
  when: on_controller

- name: Create cluster-messages log directory
  file:
    path: /var/log/cluster-messages
    state: directory
  when: on_controller

- name: Add template rules
  template:
    src: 'template-rule.conf.j2'
    dest: '{{ rsyslog_config_location }}/template-rule-{{ item.name }}.conf'
    owner: root
    group: root
  with_items: '{{ syslog_file_template_rules }}'
  notify: restart rsyslog

- name: Add forwarding rules
  template:
    src: 'forwarding.conf.j2'
    dest: '{{ rsyslog_config_location }}/forwarding-{{ item.name }}.conf'
    owner: root
    group: root
  with_items: '{{ syslog_forwarding_rules }}'
  notify: restart rsyslog

- name: Add SELinux rules for the forwarding ports
  seport:
    ports: '{{ item.port }}'
    proto: '{{ item.proto }}'
    setype: syslogd_port_t
    state: present
  with_items: '{{ syslog_forwarding_rules }}'
  when: 
    - on_controller
    - ansible_selinux.status == "enabled"
  ignore_errors: true

- name: Enable rsyslog service
  systemd:
    name: "{{ rsyslog_service }}"
    enabled: true

- name: Start rsyslog daemon
  service:
    name: "{{ rsyslog_service }}"
    state: restarted
  when: not in_image
