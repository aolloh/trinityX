---
- hosts: controllers

  # List of roles to apply to the controllers, in the order in which they will run.
  # NOTE: These and their default configurations can be found in the "roles/"
  #       directory.

  roles:
    - role: trinity/prepare
      stage: "controller"
      tags: always

#- name: Check Ansible Core Version
#  hosts: controllers
#  gather_facts: false
#  tasks:
#    - name: Get Ansible Core Version
#      shell: ansible --version | head -n1 | cut -d ']' -f1 | awk '{print $3}'
#      register: ansible_version_output
#      changed_when: false
#
#    - name: Check if Ansible Core version is less than 2.15
#      set_fact:
#        ansible_version_lt_215: "{{ ansible_version_output.stdout.split('.') | map('int') | list < [2, 15] }}"
#
#    - name: Fail if Ansible Core version is less than 2.15
#      assert:
#        that:
#          - ansible_version_lt_215 == false
#        fail_msg: "Your Ansible Core version is {{ ansible_version_output.stdout }}. Please upgrade to at least version 2.15."
#        success_msg: "Ansible Core version is adequate ({{ ansible_version_output.stdout }})."



- name: Cloud Support
  hosts: controllers
  gather_facts: true
  tasks:
    - name: Set cloud_condition fact
      set_fact:
        cloud_condition: >-
          {{ cloud_support | map('regex_replace', '^(.*)$', '\1_cloud') | map('extract', vars) | select('equalto', true) | list | length > 0 }}
    
    - block:
      - name: Include Cloud variables
        include_vars: "group_vars/{{ item }}.yml"
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true
      
      - name: Set IAC fact
        set_fact:
          installers: "{{ vars | dict2items | selectattr('key', 'search', '_installer') | map(attribute='value') | list }}"
      
      - name: Build iPXE uEFI file for the GRUB Booting.
        include_role:
          name: "cloud/ipxe"
      
      - name: Include Cloud Role and Install IAC approach.
        include_role:
          name: "cloud/{{ item }}"
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true
      
      # - name: Check if any installer is terraform
      #   include_role:
      #     name: "cloud/terraform"
      #   when: "{{ 'terraform' in installers }}"
      
      when: cloud_condition
    
    
    

    
      
    
    
    
