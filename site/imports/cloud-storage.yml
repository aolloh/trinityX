---
- hosts: controllers
  roles:
    - role: trinity/prepare
      stage: "controller"

- name: Cloud Support
  hosts: controllers
  gather_facts: true
  tasks:
    - name: Calling init
      include_role:
        name: "trinity/init"
      when: cloud_support is not defined

    - name: Set cloud_condition fact
      set_fact:
        cloud_condition: >-
          {{ cloud_support | map('regex_replace', '^(.*)$', '\1_cloud') | map('extract', vars) | select('equalto', true) | list | length > 0 }}
    
    - block:
      - name: Include Cloud variables
        include_vars: "group_vars/{{ item }}.yml"
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true
      
      - name: Set IAC fact
        set_fact:
          terraform_installer: "{{ vars | dict2items | selectattr('key', 'search', '_installer') | map(attribute='value') | select('equalto', 'terraform') | list | length > 0 }}"
      
      - name: Verifying if iPXE uEFI image has already been build
        stat:
          path: /etc/trinity/cloud-image.done
        register: cloud_uefi_image_done

      - name: Build iPXE uEFI file for GRUB Booting
        include_role:
          name: "cloud/ipxe"
        when: not cloud_uefi_image_done.stat.exists

      - name: Signing iPXE uEFI image creation off
        copy:
          content: ""
          dest: /etc/trinity/cloud-image.done
      
      - name: Verify if psk secret exists
        stat:
          path: /etc/trinity/passwords/psk/vpn.txt
        register: cloud_psk_secret_file

      - name: Include Cloud Role and Install IAC approach.
        include_role:
          name: "cloud/{{ item }}"
        vars:
          vpn_psk_secret: ""
          terraform_files: "{{ trix_local }}/terraform/{{ item }}"
          ssh_public_key_access: ""
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true

      - name: Run Terraform playbook Stage storage
        include_role:
          name: "cloud/terraform"
        vars:
          stage: storage
          cloudname: "{{ cloud_item }}"
          terraform_files: "{{ trix_local }}/terraform/{{ cloud_item }}"
          subscription_id: "{{ vars[cloud_item + '_subscription_id'] }}"
          resource_group_name: "{{ vars[cloud_item + '_resource_group_name'] }}"
        loop: "{{ vars.cloud_support }}"
        loop_control:
          loop_var: cloud_item
        when:
          - terraform_installer
          - vars[cloud_item + '_cloud'] is defined and vars[cloud_item + '_cloud'] is true
      when: cloud_condition
    
  environment:
    no_proxy: ".{{ trix_domain }},{{ trix_ctrl_ip }},{{ trix_external_fqdn }},{{ trix_ctrl_hostname }},{{ trix_ctrl1_hostname }},{{ trix_ctrl2_hostname }},{{ trix_ctrl3_hostname|default(trix_ctrl1_hostname) }},{{ trix_ctrl4_hostname|default(trix_ctrl2_hostname) }}"
    NO_PROXY: ".{{ trix_domain }},{{ trix_ctrl_ip }},{{ trix_external_fqdn }},{{ trix_ctrl_hostname }},{{ trix_ctrl1_hostname }},{{ trix_ctrl2_hostname }},{{ trix_ctrl3_hostname|default(trix_ctrl1_hostname) }},{{ trix_ctrl4_hostname|default(trix_ctrl2_hostname) }}"
    
