---
- hosts: controllers
  roles:
    - role: trinity/prepare
      stage: "controller"

- name: Cloud Support
  hosts: controllers
  gather_facts: true
  tasks:
    - name: Calling init
      include_role:
        name: "trinity/init"
      when: cloud_support is not defined

    - name: Set cloud_condition fact
      set_fact:
        cloud_condition: >-
          {{ cloud_support | map('regex_replace', '^(.*)$', '\1_cloud') | map('extract', vars) | select('equalto', true) | list | length > 0 }}
    
    - block:
      - name: Include Cloud variables
        include_vars: "group_vars/{{ item }}.yml"
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true
      
      - name: Set IAC fact
        set_fact:
          terraform_installer: "{{ vars | dict2items | selectattr('key', 'search', '_installer') | map(attribute='value') | select('equalto', 'terraform') | list | length > 0 }}"
      
      - block:
        - name: Resolving AS external IP address
          uri:
            url: "https://ipinfo.io/json"
          register: cloud_local_external_as_ip_info

        - name: Setting external AS IP address
          set_fact:
            cloud_local_external_as_ip: "{{ cloud_local_external_as_ip_info.json.ip }}"
          when:
            - cloud_local_external_as_ip_info.status is defined
            - cloud_local_external_as_ip_info.status | int == 200
        when: cloud_local_external_as_ip is not defined

      - debug:
          msg: "cloud_local_external_as_ip: {{ cloud_local_external_as_ip }}"

      - name: Build iPXE uEFI file for GRUB Booting
        include_role:
          name: "cloud/ipxe"
      
      - name: Verify if psk secret exists
        stat:
          path: /etc/trinity/passwords/psk/vpn.txt
        register: cloud_psk_secret_file

      - block:
        - name: Ensure secure pask directory exists
          file:
            path: /etc/trinity/passwords/psk
            state: directory
          
        - name: Create psk secret
          shell: "head -c 32 /dev/urandom | base64"
          #shell: "openssl rand -base64 32"
          register: cloud_base64_psk_data

        - name: Storing psk secret
          copy:
            content: "{{ cloud_base64_psk_data.stdout }}"
            dest: /etc/trinity/passwords/psk/vpn.txt
            mode: 0640
            owner: root
            group: root
          when: 
            - cloud_base64_psk_data is defined
            - cloud_base64_psk_data.rc | int == 0
        when: not cloud_psk_secret_file.stat.exists

      - name: Reading in psk secret
        set_fact:
          cloud_psk_secret: "{{ lookup('file', '/etc/trinity/passwords/psk/vpn.txt') }}"

      - name: Reading in ssh public key
        set_fact:
          cloud_ssh_public_key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"

      - name: Include Cloud Role and Install IAC approach.
        include_role:
          name: "cloud/{{ item }}"
        vars:
          vpn_psk_secret: "{{ cloud_psk_secret }}"
          terraform_files: "{{ trix_local }}/terraform/{{ item }}"
          ssh_public_key_access: "{{ cloud_ssh_public_key }}"
        loop: "{{ vars.cloud_support }}"
        when: vars[item + '_cloud'] is defined and vars[item + '_cloud'] is true

      - name: Run Terraform playbook
        include_role:
          name: "cloud/terraform"
        vars:
          cloudname: "{{ cloud_item }}"
          terraform_files: "{{ trix_local }}/terraform/{{ cloud_item }}"
        loop: "{{ vars.cloud_support }}"
        loop_control:
          loop_var: cloud_item
        when:
          - terraform_installer
          - vars[cloud_item + '_cloud'] is defined and vars[cloud_item + '_cloud'] is true

      - name: Calling VPN role
        include_role:
          name: "vpn/strongswan"
        vars:
          vpn_connection_name: "{{ vars[cloud_item + '_vpn_connection_name'] }}"
          vpn_remote_public_ip: "{{ vars[cloud_item + '_obtained_remote_ip'] }}"
          vpn_local_external_ip: "{{ trix_ctrl_external_ip }}"
          vpn_local_private_subnet: "{{ trix_cluster_net +'/'+ trix_cluster_netprefix | string }}"
          vpn_remote_private_subnet: "{{ vars[cloud_item + '_virtual_net'] +'/'+ vars[cloud_item + '_virtual_netprefix'] | string }}"
          vpn_psk_secret: "{{ cloud_psk_secret }}"
        loop: "{{ vars.cloud_support }}"
        loop_control:
          loop_var: cloud_item

      - name: Include Luna cluster cloud configuration
        include_role:
          name: "cloud/luna"
        vars:
          createnodes: "{{ True if vars[cloud_item + '_node'] is defined and vars[cloud_item + '_node'] is true else False }}"
          rawhostlist: "{{ vars[cloud_item + '_nodes'] | default('') }}"
          cloudname: "{{ cloud_item }}"
          cloudtype: "{{ cloud_item }}"
          network: "{{ vars[cloud_item + '_cluster_net'] + '/' + vars[cloud_item + '_cluster_netprefix'] | string }}"
          dhcprange: "{{ vars[cloud_item + '_cluster_dhcp_start'] | default('') + '-' + vars[cloud_item + '_cluster_dhcp_end'] | default('') }}"
        loop: "{{ vars.cloud_support }}"
        loop_control:
          loop_var: cloud_item
        when: vars[cloud_item + '_cloud'] is defined and vars[cloud_item + '_cloud'] is true
      when: cloud_condition
    
  environment:
    no_proxy: ".{{ trix_domain }},{{ trix_ctrl_ip }},{{ trix_external_fqdn }},{{ trix_ctrl_hostname }},{{ trix_ctrl1_hostname }},{{ trix_ctrl2_hostname }},{{ trix_ctrl3_hostname|default(trix_ctrl1_hostname) }},{{ trix_ctrl4_hostname|default(trix_ctrl2_hostname) }}"
    NO_PROXY: ".{{ trix_domain }},{{ trix_ctrl_ip }},{{ trix_external_fqdn }},{{ trix_ctrl_hostname }},{{ trix_ctrl1_hostname }},{{ trix_ctrl2_hostname }},{{ trix_ctrl3_hostname|default(trix_ctrl1_hostname) }},{{ trix_ctrl4_hostname|default(trix_ctrl2_hostname) }}"
    
